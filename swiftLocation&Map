import SwiftUI
import MapKit
import CoreLocation

// MARK: - ContentView
struct ContentView: View {
    @StateObject private var locationManager = LocationManager()
    
    @State private var mapRegion = MKCoordinateRegion(
        center: CLLocationCoordinate2D(latitude: 11.0194785545021, longitude: -74.85043187609091),
        span: MKCoordinateSpan(latitudeDelta: 0.01, longitudeDelta: 0.01)
    )
    
    @State private var overlays: [MKPolygon] = []
    @State private var polylines: [MKPolyline] = []
    @State private var markers: [MKPointAnnotation] = []
    
    var body: some View {
        VStack {
            MapView(region: $mapRegion, overlays: overlays, polylines: polylines, markers: markers, userLocation: locationManager.location)
                .frame(height: 400)
                .cornerRadius(10)
                .onAppear {
                    cargarGeoJSON()
                    locationManager.requestPermission()
                }
            Spacer()
        }
        .padding()
    }
    
    func cargarGeoJSON() {
        if let url = Bundle.main.url(forResource: "Layers", withExtension: "geojson") {
            do {
                let data = try Data(contentsOf: url)
                let geojson = try JSONSerialization.jsonObject(with: data, options: []) as? [String: Any]
                
                if let features = geojson?["features"] as? [[String: Any]] {
                    for feature in features {
                        if let geometry = feature["geometry"] as? [String: Any],
                           let type = geometry["type"] as? String {
                            
                            if type == "LineString", let coords = geometry["coordinates"] as? [[Double]] {
                                let polylineCoords = coords.map { CLLocationCoordinate2D(latitude: $0[1], longitude: $0[0]) }
                                let polyline = MKPolyline(coordinates: polylineCoords, count: polylineCoords.count)
                                polylines.append(polyline)
                            }
                            
                            if type == "Point", let coord = geometry["coordinates"] as? [Double] {
                                let marker = MKPointAnnotation()
                                marker.coordinate = CLLocationCoordinate2D(latitude: coord[1], longitude: coord[0])
                                markers.append(marker)
                            }
                            
                            if type == "Polygon", let coords = geometry["coordinates"] as? [[[Double]]] {
                                let polygonCoords = coords.first?.map { CLLocationCoordinate2D(latitude: $0[1], longitude: $0[0]) }
                                if let polygonCoords = polygonCoords {
                                    let polygon = MKPolygon(coordinates: polygonCoords, count: polygonCoords.count)
                                    overlays.append(polygon)
                                }
                            }
                        }
                    }
                }
            } catch {
                print("Error cargando GeoJSON: \(error.localizedDescription)")
            }
        }
    }
}

// MARK: - MapView Definition
struct MapView: UIViewRepresentable {
    @Binding var region: MKCoordinateRegion
    var overlays: [MKPolygon]
    var polylines: [MKPolyline]
    var markers: [MKPointAnnotation]
    var userLocation: CLLocationCoordinate2D?

    func makeUIView(context: Context) -> MKMapView {
        let mapView = MKMapView()
        mapView.delegate = context.coordinator
        mapView.setRegion(region, animated: true)
        return mapView
    }
    
    func updateUIView(_ uiView: MKMapView, context: Context) {
        uiView.removeOverlays(uiView.overlays)
        uiView.addOverlays(polylines)
        uiView.addOverlays(overlays)
        
        uiView.removeAnnotations(uiView.annotations)
        uiView.addAnnotations(markers)
        
        if let userLocation = userLocation {
            let userMarker = MKPointAnnotation()
            userMarker.coordinate = userLocation
            userMarker.title = "Mi Ubicación"
            uiView.addAnnotation(userMarker)
        }
    }
    
    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }
    
    class Coordinator: NSObject, MKMapViewDelegate {
        var parent: MapView
        
        init(_ parent: MapView) {
            self.parent = parent
        }
        
        func mapView(_ mapView: MKMapView, rendererFor overlay: MKOverlay) -> MKOverlayRenderer {
            if let polyline = overlay as? MKPolyline {
                let renderer = MKPolylineRenderer(polyline: polyline)
                renderer.strokeColor = UIColor.blue
                renderer.lineWidth = 3
                return renderer
            }
            
            if let polygon = overlay as? MKPolygon {
                let renderer = MKPolygonRenderer(polygon: polygon)
                renderer.fillColor = UIColor.brown.withAlphaComponent(0.5)
                renderer.strokeColor = UIColor.black
                renderer.lineWidth = 2
                return renderer
            }
            
            return MKOverlayRenderer()
        }
        
        func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
            if annotation is MKUserLocation {
                return nil
            }
            
            if annotation.title == "Mi Ubicación" {
                let annotationView = MKMarkerAnnotationView(annotation: annotation, reuseIdentifier: "UserLocation")
                annotationView.markerTintColor = .blue
                return annotationView
            }
            
            return nil
        }
    }
}

// MARK: - Location Manager Mejorado
class LocationManager: NSObject, ObservableObject, CLLocationManagerDelegate {
    private var locationManager = CLLocationManager()
    @Published var location: CLLocationCoordinate2D?

    override init() {
        super.init()
        locationManager.delegate = self
        locationManager.desiredAccuracy = kCLLocationAccuracyBestForNavigation // Mayor precisión
        locationManager.distanceFilter = kCLDistanceFilterNone // Detecta cada pequeño movimiento
        locationManager.allowsBackgroundLocationUpdates = true // Permite ubicación en segundo plano
        locationManager.pausesLocationUpdatesAutomatically = false // No pausa actualizaciones

        requestPermission()
    }

    func requestPermission() {
        locationManager.requestWhenInUseAuthorization()
        locationManager.startUpdatingLocation()
    }

    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        if let lastLocation = locations.last {
            DispatchQueue.main.async {
                self.location = lastLocation.coordinate
            }
        }
    }

    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        print("Error obteniendo ubicación: \(error.localizedDescription)")
    }
}





#Preview {
    ContentView()
}

